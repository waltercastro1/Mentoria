@page "/CMS/Permission"

<PageTitle>Permisos - EmptyProject</PageTitle>

<EmptyProject.Components.Layout.SideNav lstFoldersAndPages="lstFoldersAndPages"></EmptyProject.Components.Layout.SideNav>

<div class="main-content position-relative max-height-vh-100 h-100">
    <EmptyProject.Components.Layout.NavBarDashboard Pagina="Permisos"></EmptyProject.Components.Layout.NavBarDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('img/System/Landscape.jpg');">
            <span class="mask bg-gradient-dark opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="row">
                <div class="col-12">
                    <div class="d-flex justify-content-between">
                        <h4 class="mt-4 mb-2">
                            Permisos
                        </h4>
                        <NavLink href="Dashboard"
                                 class="btn btn-outline-dark">
                            <i class="fas fa-chevron-left"></i>
                            Volver
                        </NavLink>
                    </div>
                    <hr />
                    <p>Selecciona un rol</p>
                    @if (lstAllRole != null)
                    {
                        @foreach (Role role in lstAllRole)
                        {
                            <button class="btn btn-dark mx-2"
                                    @onclick="() => ChooseRole(role.RoleId)">
                                @role.Name
                            </button>
                        }
                    }
                    <hr />
                    @if (lstMenuWithState != null)
                    {
                        @if (lstMenuWithState.Count == 0)
                        {
                            <div class="d-flex justify-content-center">
                                <a href="https://www.shutterstock.com/es/image-photo/astronaut-elements-this-image-furnished-by-1022034061"
                                   target="_blank">
                                    <img src="img/System/Astronaut.jpg"
                                         alt="login-first">
                                </a>
                            </div>
                        }
                        else
                        {
                            @if (lstMenuWithState != null)
                            {
                                @foreach (menuWithStateDTO menu in lstMenuWithState)
                                {
                                    if (menu.IsSelected)
                                    {
                                        <div class="form-check form-switch">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   checked
                                                   @onchange="() => Submit(menu.MenuId, menu.IsSelected)"
                                                   id="@menu.Name">
                                            <label class="form-check-label"
                                                   for="@menu.Name">
                                                @menu.Name
                                            </label>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="form-check form-switch">
                                            <input class="form-check-input"
                                                   type="checkbox"
                                                   @onchange="() => Submit(menu.MenuId, menu.IsSelected)"
                                                   id="@menu.Name">
                                            <label class="form-check-label"
                                                   for="@menu.Name">
                                                @menu.Name
                                            </label>
                                        </div>
                                    }
                                }
                            }
                        }
                    }
                    <hr />
                </div>
            </div>
        </div>
    </div>
    <EmptyProject.Components.Layout.FooterDashboard></EmptyProject.Components.Layout.FooterDashboard>
</div>

@code{
    #region Properties
    public User User { get; set; } = new();

    public bool Toggle { get; set; } = false;

    public int ChosenRole { get; set; }

    public List<menuWithStateDTO> lstMenuWithState { get; set; }

    public List<Menu> lstAllMenuByRoleId { get; set; }

    public List<folderForDashboard> lstFoldersAndPages = new();

    public List<Role> lstAllRole { get; set; }
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            //Look for saved user in shared component, simulates a session
            User = StateContainer.User == null ? new() : StateContainer.User;

            if (User.UserId != 0)
            {
                //Logged user
                List<Menu> lstMenuWithPermission = rolemenuRepository
                                .GetAllByRoleIdAndPathForPermission(User.RoleId, "/CMS/Permission");

                if (lstMenuWithPermission.Count == 0)
                {
                    //Redirect to...
                    NavigationManager.NavigateTo("403");
                }
                
                Toggle = true;

                List<Menu> lstMenu = menuRepository
                                            .GetAll();

                lstAllMenuByRoleId = rolemenuRepository
                                            .GetAllByRoleId(User.RoleId, lstMenu);

                lstFoldersAndPages = rolemenuRepository
                                            .GetAllPagesAndFoldersForDashboardByRoleId(User.RoleId);

                lstAllRole = roleRepository
                                .GetAll();

                lstMenuWithState = [];
            }
            else
            {
                //Not logged user
                Toggle = false;

                //Redirect to...
                NavigationManager.NavigateTo("Login");
            }
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);
        }
    }

    private void ChooseRole(int chosenRoleId)
    {
        try
        {
            List<Menu> lstAllMenu = menuRepository
                                            .GetAll();

            lstMenuWithState = rolemenuRepository
                                            .GetAllWithStateByRoleId(chosenRoleId, lstAllMenu);
            ChosenRole = chosenRoleId;
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);
        }
    }

    private void Submit(int menuId, bool isSelected)
    {
        try
        {
            //Delete by MenuId and RoleId
            rolemenuRepository
                    .DeleteByMenuIdAndRoleId(ChosenRole, menuId);

            if (!isSelected)
            {
                RoleMenu rolemenu = new()
                    {
                        DateTimeCreation = DateTime.Now,
                        DateTimeLastModification = DateTime.Now,
                        RoleMenuId = 0,
                        UserCreationId = User.UserId,
                        UserLastModificationId = User.UserId,
                        Active = true,
                        MenuId = menuId,
                        RoleId = ChosenRole,
                    };

                rolemenuRepository
                        .Add(rolemenu);
            }

            //Re-render the page
            InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);
        }
    }
}