@page "/System/FailurePage/{FailureId:int}"

@using System.ComponentModel.DataAnnotations;
@using Mentoria.Areas.System.FailureBack.DTOs;
@using Mentoria.Areas.System.FailureBack.Entities;
@using Mentoria.Areas.System.FailureBack.Repositories;
@using Mentoria.Areas.CMS;
@using Mentoria.Areas.CMS.UserBack.Entities;
@inject FailureRepository failureRepository;

@if (FailureId == 0)
{
    <PageTitle>Agregar falla - System</PageTitle>
}
else
{
    <PageTitle>Editar falla - System</PageTitle>
}

<EmptyProject.Components.Layout.SideNav lstFoldersAndPages="lstFoldersAndPages"></EmptyProject.Components.Layout.SideNav>

<div class="main-content position-relative max-height-vh-100 h-100">
    <EmptyProject.Components.Layout.NavBarDashboard Pagina="Fallas"></EmptyProject.Components.Layout.NavBarDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('assets/img/illustrations/Landscape2.jpg');">
            <span class="mask bg-gradient-primary opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="card-header mb-0 pb-0">
                <div class="d-flex justify-content-between">
                    <h3 class="mb-3">
                        @if (FailureId == 0)
                        {
                            <span>Agregar falla</span>
                        }
                        else
                        {
                            <span>Editar falla</span>
                        }
                    </h3>
                    <NavLink class="btn btn-outline-dark" href="System/FailurePage">
                        <span class="fas fa-chevron-left"></span>
                        &nbsp;Volver
                    </NavLink>
                </div>
                <hr />
            </div>
            <div class="card-body px-0">
                <form method="post" @onsubmit="Submit"
                      @formname="failure-form" class="mb-4">
                    <AntiforgeryToken />
                    <!--Message-->
                    <div class="input-group input-group-static mb-3">
                        <label for="message">
                            Mensaje
                            @if (ErrorMessageMessage != "")
                            {
                                @((MarkupString)ErrorMessageMessage)
                            }
                        </label>
                        <textarea rows="10"
                        class="form-control"
                        value="@Failure!.Message"
                        @onchange="HandleMessageChange"
                        id="message">
                        </textarea>
                    </div>
                    <!--EmergencyLevel-->
                    <div class="input-group input-group-static mb-3">
                        <label for="emergencylevel">
                            Nivel de emergencia
                            @if (ErrorMessageEmergencyLevel != "")
                            {
                                @((MarkupString)ErrorMessageEmergencyLevel)
                            }
                        </label>
                        <input type="number"
                        step="1" 
                        id="emergencylevel"
                        class="form-control"
                        value="@Failure!.EmergencyLevel"
                        @onchange="HandleEmergencyLevelChange" />
                    </div>
                    <!--StackTrace-->
                    <div class="input-group input-group-static mb-3">
                        <label for="stacktrace">
                            Traza
                            @if (ErrorMessageStackTrace != "")
                            {
                                @((MarkupString)ErrorMessageStackTrace)
                            }
                        </label>
                        <textarea rows="10"
                        class="form-control"
                        value="@Failure!.StackTrace"
                        @onchange="HandleStackTraceChange"
                        id="stacktrace">
                        </textarea>
                    </div>
                    <!--Source-->
                    <div class="input-group input-group-static mb-3">
                        <label for="source">
                            Fuente
                            @if (ErrorMessageSource != "")
                            {
                                @((MarkupString)ErrorMessageSource)
                            }
                        </label>
                        <textarea rows="10"
                        class="form-control"
                        value="@Failure!.Source"
                        @onchange="HandleSourceChange"
                        id="source">
                        </textarea>
                    </div>
                    <!--Comment-->
                    <div class="input-group input-group-static mb-3">
                        <label for="comment">
                            Comentario
                            @if (ErrorMessageComment != "")
                            {
                                @((MarkupString)ErrorMessageComment)
                            }
                        </label>
                        <textarea rows="10"
                        class="form-control"
                        value="@Failure!.Comment"
                        @onchange="HandleCommentChange"
                        id="comment">
                        </textarea>
                    </div>
                    
                    <hr />
                    @((MarkupString)Message)
                    <div class="d-flex justify-content-between">
                        <button id="btn-submit" type="submit"
                                class="btn btn-success">
                            <i class="fas fa-pen"></i>
                            @if (FailureId == 0)
                            {
                                <span>Agregar</span>
                            }
                            else
                            {
                                <span>Editar</span>
                            }
                        </button>
                        <NavLink class="btn btn-outline-dark mx-3" href="System/FailurePage">
                            <span class="fas fa-chevron-left"></span>
                            &nbsp;Volver
                        </NavLink>
                    </div>
                </form>
                
            </div>
        </div>
    </div>

    <EmptyProject.Components.Layout.FixedPlugin></EmptyProject.Components.Layout.FixedPlugin>
    <EmptyProject.Components.Layout.FooterDashboard></EmptyProject.Components.Layout.FooterDashboard>
</div>

@code {
    #region Properties
    public List<folderForDashboard> lstFoldersAndPages = [];

    public List<Role> lstRole { get; set; } = [];

    [Parameter]
    public int FailureId { get; set; }

    public string Message { get; set; } = "";

    [SupplyParameterFromForm]
    public Failure Failure { get; set; } = new();

    public User User { get; set; } = new();

    //Error messages for inputs
    public string ErrorMessageFailureId { get; set; } = "";
    public string ErrorMessageActive { get; set; } = "";
    public string ErrorMessageDateTimeCreation { get; set; } = "";
    public string ErrorMessageDateTimeLastModification { get; set; } = "";
    public string ErrorMessageUserCreationId { get; set; } = "";
    public string ErrorMessageUserLastModificationId { get; set; } = "";
    public string ErrorMessageMessage { get; set; } = "";
    public string ErrorMessageEmergencyLevel { get; set; } = "";
    public string ErrorMessageStackTrace { get; set; } = "";
    public string ErrorMessageSource { get; set; } = "";
    public string ErrorMessageComment { get; set; } = "";
    

    
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            //Look for saved user in shared component, simulates a session
            User = StateContainer.User == null ? new() : StateContainer.User;

            lstFoldersAndPages = [];
            Failure = new();

            if (User != null)
            {
                if (User.UserId != 0)
                {
                    //Logged user
                    List<Menu> lstMenuWithPermission = rolemenuRepository
                                    .GetAllByRoleIdAndPathForPermission(User.RoleId, "/System/FailurePage");

                    if (lstMenuWithPermission.Count == 0)
                    {
                        //Redirect to...
                        NavigationManager.NavigateTo("403");
                    }

                    List<Menu> lstMenu = menuRepository
                                        .GetAll();

                    lstFoldersAndPages = rolemenuRepository
                                            .GetAllPagesAndFoldersForDashboardByRoleId(User.RoleId);

                    lstRole = roleRepository.GetAll();

                    if (FailureId == 0)
                    {
                        //Create new Failure
                        Failure = new();
                    }
                    else
                    {
                        //Edit Failure

                        Failure = failureRepository
                                    .GetByFailureId(FailureId);
                    }                    
                }
                else
                {
                    //Not logged user

                    //Redirect to...
                    NavigationManager.NavigateTo("Login");
                }
            }
            else
            {
                //Impossible
            }

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
    }

    private async Task Submit()
    {
        try
        {
            if (FailureId == 0)
            {
                //Create new Failure
                Failure.Active = true;
                Failure.UserCreationId = User.UserId;
                Failure.UserLastModificationId = User.UserId;
                Failure.DateTimeCreation = DateTime.Now;
                Failure.DateTimeLastModification = DateTime.Now;

                if(Check("") == null)
                {
                    failureRepository
                        .Add(Failure);

                    //Redirect to users page
                    NavigationManager.NavigateTo("System/FailurePage");
                }


            }
            else
            {
                //Update data
                Failure.DateTimeLastModification = DateTime.Now;
                Failure.UserLastModificationId = User.UserId;

                if(Check("") == null)
                {
                    failureRepository
                            .Update(Failure);

                    //Redirect to users page
                    NavigationManager.NavigateTo("System/FailurePage");
                }
            }
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    #region Uploaders
    
    #endregion    

    #region Searchers
    
    #endregion

    /// <summary>
    /// 
    /// </summary>
    /// <param name="attributeToValid">Debe estar encapsulado en []. Ejemplo: [Boolean]</param>
    /// <returns></returns>
    private ValidationResult Check(string attributeToValid)
    {
        try
        {
            List<ValidationResult> lstValidationResult = new List<ValidationResult>();
            ValidationContext ValidationContext = new ValidationContext(Failure);

            bool IsValid = Validator.TryValidateObject(Failure, ValidationContext, lstValidationResult, true);

            ValidationResult ValidationResult = lstValidationResult
            .AsQueryable()
            .FirstOrDefault(x => x.ErrorMessage.StartsWith(attributeToValid));

            if (!IsValid)
            {
                Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Para guardar correctamente debe completar los siguientes puntos: <br/> <ul>";

                foreach (var validationResult in lstValidationResult)
                {
                    validationResult.ErrorMessage = validationResult.ErrorMessage.Substring(validationResult.ErrorMessage.IndexOf(']') + 1);
                    Message += $@"<li>{validationResult}</li>";
                }

                Message = Message + "</ul></div>";
            }
            else
            {
                Message = $@"<div class=""alert alert-successs text-white font-weight-bold"" role=""alert"">
                                Todos los datos ingresados son correctos
                            </div>";
            }


            if (ValidationResult != null)
            {
                ValidationResult.ErrorMessage = ValidationResult.ErrorMessage.Substring(ValidationResult.ErrorMessage.IndexOf(']') + 1);
            }

            return ValidationResult;
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = User.UserId == 0 ? 1 : User.UserId,
                    UserLastModificationId = User.UserId == 0 ? 1 : User.UserId,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";

            return null;
        }
        finally
        {

        }
    }

    #region Handlers
    private async Task HandleMessageChange(ChangeEventArgs e)
    {
        Failure.Message = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[Message]");

        if (ValidationResult == null)
        {
            ErrorMessageMessage = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageMessage = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleEmergencyLevelChange(ChangeEventArgs e)
    {
        Failure.EmergencyLevel = Convert.ToInt32(e.Value?.ToString());
        ValidationResult ValidationResult = Check("[EmergencyLevel]");

        if (ValidationResult == null)
        {
            ErrorMessageEmergencyLevel = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageEmergencyLevel = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleStackTraceChange(ChangeEventArgs e)
    {
        Failure.StackTrace = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[StackTrace]");

        if (ValidationResult == null)
        {
            ErrorMessageStackTrace = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageStackTrace = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleSourceChange(ChangeEventArgs e)
    {
        Failure.Source = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[Source]");

        if (ValidationResult == null)
        {
            ErrorMessageSource = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageSource = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    private async Task HandleCommentChange(ChangeEventArgs e)
    {
        Failure.Comment = e.Value?.ToString();
        ValidationResult ValidationResult = Check("[Comment]");

        if (ValidationResult == null)
        {
            ErrorMessageComment = $@"<span class=""text-success"">
                <i class=""fas fa-circle-check""></i>
            </span>";
        }
        else
        {
            ErrorMessageComment = $@"<span class=""text-danger"">
    <i class=""fas fa-circle-xmark""></i>
    {ValidationResult.ErrorMessage}
</span>";
        }

        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }
    
    #endregion
}

